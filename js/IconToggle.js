// Generated by CoffeeScript 1.11.1
var IconSize, ImageView, ReactType, Shape, Style, Toggle, parseOptions, type;

Style = require("react-validators").Style;

parseOptions = require("parseOptions");

ReactType = require("modx/lib/Type");

ImageView = require("modx/lib/ImageView");

Toggle = require("Toggle");

Shape = require("Shape");

IconSize = Shape({
  width: Number,
  height: Number
});

type = ReactType("IconToggle");

type.defineOptions({
  size: IconSize.isRequired,
  icons: Array.isRequired
});

type.defineValues(function(options) {
  return {
    _size: options.size,
    _toggle: Toggle((function() {
      return parseOptions(Toggle, options, {
        assign: {
          modes: options.icons
        }
      });
    })())
  };
});

type.defineAnimatedValues(function() {
  return {
    _icon: this._toggle.mode
  };
});

type.defineBoundMethods({
  _onToggle: function(icon, index) {
    var base;
    this._icon.set(icon);
    return typeof (base = this.props).onToggle === "function" ? base.onToggle(index) : void 0;
  }
});

type.definePrototype({
  value: {
    get: function() {
      return this._toggle.value;
    },
    set: function(newValue) {
      return this._toggle.value = newValue;
    }
  },
  icon: {
    get: function() {
      return this._icon.get();
    },
    set: function(newValue) {
      return this._icon.set(newValue);
    }
  }
});

type.defineMethods({
  toggle: function() {
    return this._toggle.toggle();
  },
  resetIcon: function() {
    return this._icon.set(this._toggle.mode);
  }
});

type.defineProps({
  style: Style,
  onToggle: Function
});

type.render(function() {
  return this._toggle.render({
    style: this.props.style,
    children: this._renderIcon(),
    onToggle: this._onToggle
  });
});

type.defineMethods({
  _renderIcon: function() {
    return ImageView({
      style: this._size,
      source: this._icon
    });
  }
});

module.exports = type.build();
